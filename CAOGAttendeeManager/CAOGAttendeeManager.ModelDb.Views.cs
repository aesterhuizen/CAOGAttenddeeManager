//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(CAOGAttendeeManager.ModelDb),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets123a60d275aa25935f58426d5a5b1487d54f5b9f2fa3f687f8ac58068b4ae83d))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets123a60d275aa25935f58426d5a5b1487d54f5b9f2fa3f687f8ac58068b4ae83d : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "123a60d275aa25935f58426d5a5b1487d54f5b9f2fa3f687f8ac58068b4ae83d"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ActivityPair")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Attendee")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Attendance_Info")
            {
                return GetView2();
            }

            if (extentName == "ModelDb.Activities")
            {
                return GetView3();
            }

            if (extentName == "ModelDb.Attendees")
            {
                return GetView4();
            }

            if (extentName == "ModelDb.Attendance_Info")
            {
                return GetView5();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ActivityPair.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActivityPair
        [CodeFirstDatabaseSchema.ActivityPair](T1.ActivityPair_ActivityPairId, T1.ActivityPair_AttendeeId, T1.ActivityPair_ActivityGroup, T1.ActivityPair_ParentTaskName, T1.ActivityPair_ChildTaskName, T1.ActivityPair_DateString, T1.ActivityPair_Date)
    FROM (
        SELECT 
            T.ActivityPairId AS ActivityPair_ActivityPairId, 
            T.AttendeeId AS ActivityPair_AttendeeId, 
            T.ActivityGroup AS ActivityPair_ActivityGroup, 
            T.ParentTaskName AS ActivityPair_ParentTaskName, 
            T.ChildTaskName AS ActivityPair_ChildTaskName, 
            T.DateString AS ActivityPair_DateString, 
            T.Date AS ActivityPair_Date, 
            True AS _from0
        FROM ModelDb.Activities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Attendee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Attendee
        [CodeFirstDatabaseSchema.Attendee](T1.Attendee_AttendeeId, T1.Attendee_LastName, T1.Attendee_FirstName, T1.Attendee_Phone, T1.Attendee_Email)
    FROM (
        SELECT 
            T.AttendeeId AS Attendee_AttendeeId, 
            T.LastName AS Attendee_LastName, 
            T.FirstName AS Attendee_FirstName, 
            T.Phone AS Attendee_Phone, 
            T.Email AS Attendee_Email, 
            True AS _from0
        FROM ModelDb.Attendees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Attendance_Info.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Attendance_Info
        [CodeFirstDatabaseSchema.Attendance_Info](T1.[Attendance_Info.Attendance_InfoId], T1.[Attendance_Info.AttendeeId], T1.[Attendance_Info.DateString], T1.[Attendance_Info.Date], T1.[Attendance_Info.Status])
    FROM (
        SELECT 
            T.Attendance_InfoId AS [Attendance_Info.Attendance_InfoId], 
            T.AttendeeId AS [Attendance_Info.AttendeeId], 
            T.DateString AS [Attendance_Info.DateString], 
            T.Date AS [Attendance_Info.Date], 
            T.Status AS [Attendance_Info.Status], 
            True AS _from0
        FROM ModelDb.Attendance_Info AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDb.Activities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Activities
        [CAOGAttendeeManager.ActivityPair](T1.ActivityPair_ActivityPairId, T1.ActivityPair_AttendeeId, T1.ActivityPair_ActivityGroup, T1.ActivityPair_ParentTaskName, T1.ActivityPair_ChildTaskName, T1.ActivityPair_DateString, T1.ActivityPair_Date)
    FROM (
        SELECT 
            T.ActivityPairId AS ActivityPair_ActivityPairId, 
            T.AttendeeId AS ActivityPair_AttendeeId, 
            T.ActivityGroup AS ActivityPair_ActivityGroup, 
            T.ParentTaskName AS ActivityPair_ParentTaskName, 
            T.ChildTaskName AS ActivityPair_ChildTaskName, 
            T.DateString AS ActivityPair_DateString, 
            T.Date AS ActivityPair_Date, 
            True AS _from0
        FROM CodeFirstDatabase.ActivityPair AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDb.Attendees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Attendees
        [CAOGAttendeeManager.Attendee](T1.Attendee_AttendeeId, T1.Attendee_LastName, T1.Attendee_FirstName, T1.Attendee_Phone, T1.Attendee_Email)
    FROM (
        SELECT 
            T.AttendeeId AS Attendee_AttendeeId, 
            T.LastName AS Attendee_LastName, 
            T.FirstName AS Attendee_FirstName, 
            T.Phone AS Attendee_Phone, 
            T.Email AS Attendee_Email, 
            True AS _from0
        FROM CodeFirstDatabase.Attendee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ModelDb.Attendance_Info.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Attendance_Info
        [CAOGAttendeeManager.Attendance_Info](T1.[Attendance_Info.Attendance_InfoId], T1.[Attendance_Info.AttendeeId], T1.[Attendance_Info.DateString], T1.[Attendance_Info.Date], T1.[Attendance_Info.Status])
    FROM (
        SELECT 
            T.Attendance_InfoId AS [Attendance_Info.Attendance_InfoId], 
            T.AttendeeId AS [Attendance_Info.AttendeeId], 
            T.DateString AS [Attendance_Info.DateString], 
            T.Date AS [Attendance_Info.Date], 
            T.Status AS [Attendance_Info.Status], 
            True AS _from0
        FROM CodeFirstDatabase.Attendance_Info AS T
    ) AS T1");
        }
    }
}
